{
    "resourceType": "Library",
    "id": "CQLExample",
    "meta": {
      "profile": [ "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library" ]
    },
    "language": "en",
    "contained": [ {
      "resourceType": "Parameters",
      "id": "options",
      "parameter": [ {
        "name": "translatorVersion",
        "valueString": "2.9.0-SNAPSHOT"
      }, {
        "name": "enableAnnotations",
        "valueBoolean": true
      }, {
        "name": "enableLocators",
        "valueBoolean": true
      }, {
        "name": "disableListDemotion",
        "valueBoolean": true
      }, {
        "name": "disableListPromotion",
        "valueBoolean": true
      }, {
        "name": "format",
        "valueString": "XML"
      }, {
        "name": "format",
        "valueString": "JSON"
      }, {
        "name": "analyzeDataRequirements",
        "valueBoolean": true
      }, {
        "name": "collapseDataRequirements",
        "valueBoolean": true
      }, {
        "name": "compatibilityLevel",
        "valueString": "1.5"
      }, {
        "name": "enableCqlOnly",
        "valueBoolean": false
      }, {
        "name": "errorLevel",
        "valueString": "Info"
      }, {
        "name": "signatureLevel",
        "valueString": "None"
      }, {
        "name": "validateUnits",
        "valueBoolean": true
      }, {
        "name": "verifyOnly",
        "valueBoolean": false
      } ]
    } ],
    "extension": [ {
      "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
      "valueReference": {
        "reference": "#options"
      }
    } ],
    "url": "http://hl7.org/fhir/uv/cql/Library/CQLExample",
    "version": "4.1.000",
    "name": "CQLExample",
    "title": "FHIR Common (Source CQL Example)",
    "status": "active",
    "experimental": false,
    "type": {
      "coding": [ {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      } ]
    },
    "date": "2022-11-16T17:19:08+00:00",
    "publisher": "ICF",
    "description": "This library defines terminologies and functions commonly used in FHIR-based CQL artifacts.\n",
    "content": [ {
      "contentType": "text/cql",
      "data": ""
    } ]
  }